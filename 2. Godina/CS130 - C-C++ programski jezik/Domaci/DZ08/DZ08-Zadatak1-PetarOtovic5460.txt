HEADER FAJL ---------------------------------------------------------------

#ifndef RODITELJ_H
#define RODITELJ_H

#include <string>

using namespace std;

class Roditelj {
private:
    string imeRoditelja;
    string* deca;
    int brojDece;

public:
    Roditelj();
    Roditelj(const string& imeRoditelja, int brojDece);
    Roditelj(const Roditelj& other);

    ~Roditelj();

    void setImeRoditelja(const string& imeRoditelja);
    void setBrojDece(int brojDece);
    void setImeDeteta(int index, const string& imeDeteta);

    string getImeRoditelja() const;
    int getBrojDece() const;
    string getImeDeteta(int index) const;
};

#endif

KLASA (Roditelj.cpp) ------------------------------------------------------------------------

#include "Roditelj.h"
#include <iostream>

using namespace std;

Roditelj::Roditelj() : imeRoditelja(""), deca(nullptr), brojDece(0) {}

Roditelj::Roditelj(const string& imeRoditelja, int brojDece)
    : imeRoditelja(imeRoditelja), brojDece(brojDece), deca(nullptr) {
    deca = new string[brojDece];
    if (deca == nullptr) {
        cout << "Neuspesno alociranje memorije\n";
    }
}

Roditelj::Roditelj(const Roditelj& other)
    : imeRoditelja(other.imeRoditelja), brojDece(other.brojDece) {
    deca = new string[brojDece];
    for (int i = 0; i < brojDece; ++i) {
        deca[i] = other.deca[i];
    }
}

Roditelj::~Roditelj() {
    delete[] deca;
    cout << "Objekat je unisten" << endl;
}

void Roditelj::setImeRoditelja(const string& imeRoditelja) {
    this->imeRoditelja = imeRoditelja;
}

void Roditelj::setBrojDece(int brojDece) {
    delete[] deca;
    this->brojDece = brojDece;
    deca = new string[brojDece];
}

void Roditelj::setImeDeteta(int index, const string& imeDeteta) {
    if (index >= 0 && index < brojDece && deca != nullptr) {
        deca[index] = imeDeteta;
    }
    else {
        cout << "Nije moguÄ‡e postaviti ime deteta." << endl;
    }
}

string Roditelj::getImeRoditelja() const {
    return imeRoditelja;
}

int Roditelj::getBrojDece() const {
    return brojDece;
}

string Roditelj::getImeDeteta(int index) const {
    if (index >= 0 && index < brojDece) return deca[index];
    return "";
}

MAIN --------------------------------------------------------------------------------

#include <iostream>
#include "Roditelj.h"

using namespace std;

const int MAX_RODITELJA = 2;
Roditelj* roditelji[MAX_RODITELJA];

for (int i = 0; i < MAX_RODITELJA; ++i) {
    string imeRoditelja;
    int brojDece;
    cout << "Unesite ime roditelja: ";
    cin >> imeRoditelja;
    cout << "Unesite broj dece za roditelja " << imeRoditelja << ": ";
    cin >> brojDece;

    roditelji[i] = new Roditelj(imeRoditelja, brojDece);

    for (int j = 0; j < brojDece; ++j) {
        string imeDeteta;
        cout << "Unesite ime deteta " << j + 1 << " za roditelja " << imeRoditelja << ": ";
        cin >> imeDeteta;
        roditelji[i]->setImeDeteta(j, imeDeteta);
    }
}

int maksBrojDece = 0;
for (int i = 0; i < MAX_RODITELJA; ++i) {
    int brojDece = roditelji[i]->getBrojDece();
    if (brojDece > maksBrojDece) maksBrojDece = brojDece;
}

cout << "Roditelji sa najvecim brojem dece su: ";

for (int i = 0; i < MAX_RODITELJA; ++i) {
    if (roditelji[i]->getBrojDece() == maksBrojDece) cout << roditelji[i]->getImeRoditelja();
}

cout << endl;

for (int i = 0; i < MAX_RODITELJA; ++i) {
    delete roditelji[i];
}

return 0;
